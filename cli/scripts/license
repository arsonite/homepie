#!/usr/bin/env python3.11

# Copyright (C) 2024-2025 Burak GÃ¼naydin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# System imports
import os

# Package imports
try:
    import pyperclip
    pyperclip_installed = True
except:
    from teatype.logging import warn
    pyperclip_installed = False

# From package imports
from teatype.cli import BaseCLI
from teatype.logging import err, log

class License(BaseCLI):
    def meta(self):
        return {
            'name': 'license',
            'shorthand': 'li',
            'help': 'Print the license of the project for different programming languages',
            'commands': [
                {
                    'name': 'gpl3',
                    'shorthand': 'g',
                    'help': 'Print the GNU General Public License v3',
                },
                {
                    'name': 'mit',
                    'shorthand': 'm',
                    'help': 'Print the MIT License',
                }
            ],
            'flags': [
                {
                    'long': 'lang',
                    'short': 'l',
                    'help': 'Print the license in a specific language',
                    'options': [
                        'go',
                        'html',
                        'jsonc',
                        'python',
                        'text',
                        'typescript'
                    ],
                    'required': True
                },
                {
                    'long': 'long',
                    'short': 'lg',
                    'help': 'Print the long version of the license',
                    'required': False
                },
                {
                    'long': 'no-copy',
                    'short': 'nc',
                    'help': 'Stop copying the license text',
                    'required': False,
                },
                {
                    'long': 'no-print',
                    'short': 'nv',
                    'help': 'Stop printing the license text',
                    'required': False
                }
            ]
        }
        
    def format_license(self, license:str):
        """
        Formats the license text for printing to the console.
        Adds a comment character to the beginning of each line.
        
        Args:
            license (str): The license text to format.
        
        Returns:
            str: The formatted license text.
        """
        # Split the license text into lines
        lines = license.split('\n')
        
        # Initialize the comment character to an empty string
        comment_character = ''
        # Retrieve the current flag value provided by the user
        flag_value = self.get_flag('lang')
        # Assign the comment character based on the selected flag value
        if flag_value == 'g' or flag_value == 'go':
            comment_character = '// ' # Go language single-line comment
        elif flag_value == 'h' or flag_value == 'html':
            comment_character = '' # HTML does not use single-line comments in this context
        elif flag_value == 'jc' or flag_value == 'jsonc':
            comment_character = ' * ' # JSONC uses asterisk for block comments
        elif flag_value == 'py' or flag_value == 'python':
            comment_character = '# ' # Python single-line comment
        elif flag_value == 't' or flag_value == 'text':
            comment_character = '' # Plain text does not require comment characters
        elif flag_value == 'ts' or flag_value == 'typescript':
            comment_character = ' * ' # TypeScript uses asterisk in block comments
        
        # Add a comment character to the beginning of each line
        formatted_license = '\n'.join([f'{comment_character}{line}' for line in lines])
        
        # Post-process the formatted license text based on the selected flag value        
        if flag_value == 'h' or flag_value == 'html':
            formatted_license = f'<!--\n{formatted_license}\n-->' # HTML block comment
        if flag_value == 'jc' or flag_value == 'jsonc':
            formatted_license = f'/**\n{formatted_license}\n */' # TypeScript block comment
        elif flag_value == 'ts' or flag_value == 'typescript':
            formatted_license = f'/**\n * @license\n{formatted_license}\n */' # TypeScript block comment
        
        return formatted_license

    def execute(self):
        """
        Executes the license printing command based on provided flags.
        Retrieves the appropriate license text, optionally copies it to the clipboard,
        and prints it to the console.
        """
        try:
            # Determine the parent directory relative to the current file
            parent_directory = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
            # Construct the path to the 'files' directory within the parent directory
            files_directory_path = os.path.join(parent_directory, 'files')
            
            # Check if the 'long' flag is set to determine which license file to use
            long_version = self.get_flag('long')
            license_type = self.get_command()
            license_text_filename = f'{license_type}-' + (f'license-long.txt' if long_version else 'license-short.txt')
            
            # Open and read the selected license file
            with open(f'{files_directory_path}/{license_text_filename}', 'r') as file:
                license = file.read()
                # If 'no-copy' flag is not set, attempt to copy the license text to clipboard
                if not self.get_flag('no-copy'):
                    if pyperclip_installed:
                        try:
                            pyperclip.copy(license)
                            log('The license text has been copied to the clipboard.')
                        except:
                            err('Could not copy the license text to the clipboard. Is it possible you are in a ssh session?')
                    else:
                        warn('The "pyperclip" package is not installed. The license text will not be copied to the clipboard.',
                             pad_top=1)
                
                formatted_license = self.format_license(license)
                # Log the license text with padding for formatting
                log(formatted_license, pad_top=1, pad_bottom=1)
        except:
            err('An error occurred while trying to print the license text.',
                exit=True,
                traceback=True)
                
if __name__ == '__main__':
    License()