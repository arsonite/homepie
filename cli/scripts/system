#!/usr/bin/env python3.11

# Copyright (C) 2024-2025 Burak GÃ¼naydin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# System imports
import os
import sys
import traceback

# Add the parent directory of 'src' to the system path.
# This allows the script to import modules from the 'src' directory.
# Specifically, it inserts the absolute path of the 'src' directory
# at the beginning of the system path list (sys.path).
# This is useful when the script is executed from a different directory
# and needs to access modules located in 'src'.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# From own imports
from src.BaseCLI import BaseCLI
        
class System(BaseCLI):
    def meta(self):
        return {
            'name': 'system',
            'shorthand': 'sys',
            'help': 'Useful system command shortcuts',
            'commands': [
                {
                    'name': 'monitor',
                    'shorthand': 'mt',
                    'help': 'Monitor system resources'
                },
                {
                    'name': 'reboot',
                    'shorthand': 'rb',
                    'help': 'Reboot the system'
                },
                {
                    'name': 'shutdown',
                    'shorthand': 'sh',
                    'help': 'Shutdown the system'
                },
                {
                    'name': 'stress',
                    'shorthand': 'st',
                    'help': 'Stress test the system'
                }
            ]
        }
        
        
    def monitor(self):
        self.shell('htop -d 7 -H -t -U')
        
    def reboot(self):
        self.shell('reboot -h now', sudo=True)
        
    def shutdown(self):
        self.shell('shutdown -h now', sudo=True)
        
    def stress(self):
        self.shell('stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s')

    def execute(self):
        command = self.get_command()
        
        try:
            if (command == 'monitor' or command == 'mt'):
                self.monitor()
            elif command == 'reboot' or command == 'rb':
                self.reboot()
            elif command == 'shutdown' or command == 'sh':
                self.shutdown()
            elif command == 'stress' or command == 'st':
                self.stress()
        except:
            traceback.print_exc()
        
if __name__ == '__main__':
    System()