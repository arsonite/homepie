#!/usr/bin/env python3.11

# Copyright (c) 2024-2024 Burak Günaydin
# All Rights Reserved
#
# This software is the confidential and proprietary information of
# Burak Günaydin. You may not use, modify, or distribute this
# software (unless you have the permission of the copyright holder)
# except in accordance with the terms of any applicable license agreement.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# From own imports
import os
import subprocess
import sys

# Add the parent directory of 'src' to the system path.
# This allows the script to import modules from the 'src' directory.
# Specifically, it inserts the absolute path of the 'src' directory
# at the beginning of the system path list (sys.path).
# This is useful when the script is executed from a different directory
# and needs to access modules located in 'src'.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.BaseCLI import BaseCLI

class MakeExecutable(BaseCLI):
    """
    A class to handle making files or directories executable.
    Inherits from BaseCLI to utilize command-line interface functionalities.
    """

    def make_file_executable(self, file, git_support):
        """
        Make a single file executable and optionally add it to the git index.

        :param file: The file to make executable.
        :param git_support: Boolean indicating whether to add the file to the git index.
        """
        # Change the file permissions to make it executable by all users.
        subprocess.run(['sudo', 'chmod', 'a+x', file], check=True)
        # Set the file permissions to 755 (rwxr-xr-x).
        subprocess.run(['sudo', 'chmod', '755', file], check=True)
        if git_support:
            # Add the file to the git index.
            subprocess.run(['git', 'add', file], check=True)
            # Update the git index to mark the file as executable.
            subprocess.run(['git', 'update-index', '--chmod=+x', file], check=True)

    def execute(self):
        """
        Execute the command to make the specified file or directory executable.
        """
        # Check if the --git-support flag is set.
        git_support = self.get_flag('--git-support')
        # Get the filename argument from the command line.
        filename = self.get_argument('filename')
        # Check if the --directory flag is set.
        if self.get_flag('--directory'):
            # Walk through the directory and make all files executable.
            for root, _, files in os.walk(filename):
                for file in files:
                    # Make each file in the directory executable.
                    self.make_file_executable(os.path.join(root, file), git_support)
        else:
            # Make the single specified file executable.
            self.make_file_executable(filename, git_support)
    
# Metadata dictionary for the MakeExecutable command-line interface.
# This dictionary contains all the necessary information to set up the CLI,
# including the command name, shorthand, help description, arguments, and flags.
META_DATA = {
    'name': 'make-executable',
    'shorthand': 'me',
    'help': 'Make a file executable by setting the executable bit, allowing it to be run as a program, omitting the interpreter.',
    'arguments': [
        {
            'name': 'filename',
            'help': 'The name of the file (or directory including files) to make executable',
            'required': True
        }
    ],
    'flags': [
        {
            'short': '-d',
            'long': '--directory',
            'help': 'Treat the filename as a directory and make all files within it executable',
            'required': False
        },
        {
            'short': '-g',
            'long': '--git-support',
            'help': 'Add the file to the git index and set the executable bit',
            'help_extension': [
                '(recommended for version control)'
            ],
            'required': False
        },
    ]
}
# Instantiate the MakeExecutable class with the provided metadata.
# The metadata includes the name, shorthand, help description, arguments, and flags
# for the command-line interface.
make_executable = MakeExecutable(**META_DATA)