#!/usr/bin/env python3.11

# Copyright (c) 2024-2024 Burak Günaydin
# All Rights Reserved
#
# This software is the confidential and proprietary information of
# Burak Günaydin. You may not use, modify, or distribute this
# software (unless you have the permission of the copyright holder)
# except in accordance with the terms of any applicable license agreement.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# System imports
import json
import os
import sys

# From system import
from typing import List

# Add the parent directory of 'src' to the system path.
# This allows the script to import modules from the 'src' directory.
# Specifically, it inserts the absolute path of the 'src' directory
# at the beginning of the system path list (sys.path).
# This is useful when the script is executed from a different directory
# and needs to access modules located in 'src'.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# From own imports
from src.BaseCLI import BaseCLI

class _Alias:
    def __init__(self, name, help, command):
        self.name = name
        self.help = help
        self.command = command

class Aliases(BaseCLI):
    def pre_initialization(self):
        # TODO: Move this to .env and make dynamically parsed from source path
        file_path = '/usr/local/src/homepie/cli/files/aliases.json'
        # Read aliases from a JSON file
        with open(file_path, 'r') as file:
            aliases = json.load(file)
        
        self.aliases = []
        for alias in aliases:
            self.aliases.append(_Alias(**alias))
    
    def list_aliases(self):
        """
        List all aliases.
        """
        print()
        print('Available aliases:')
        for alias in self.aliases:
            print(f'    {alias.name}: {alias.help}')
        print()
        
    def edit_aliases(self):
        """
        Edit aliases.
        """
        print('Editing aliases...')
        
    def inject_aliases(self):
        """
        Inject all aliases.
        """
        print('Injecting all aliases...')
        
    def eject_aliases(self):
        """
        Eject all aliases.
        """
        print('Ejecting all aliases...')
    
    def execute(self):
        command = self.get_command()
        if (command == 'list' or command == 'ls'):
            self.list_aliases()
        elif command == 'edit' or command == 'ed':
            self.edit_aliases()
        elif command == 'inject' or command == 'in':
            self.inject_aliases()
        elif command == 'eject' or command == 'ej':
            self.eject_aliases()
        
META_DATA = {
    'name': 'aliases',
    'shorthand': 'al',
    'help': 'Manage, edit, inject, eject and list aliases for all custom shorthand commands.',
    'commands': [
        {
            'name': 'list',
            'shorthand': 'ls',
            'help': 'List all aliases'
        },
        {
            'name': 'edit',
            'shorthand': 'ed',
            'help': 'Edit aliases'
        },
        {
            'name': 'inject',
            'shorthand': 'in',
            'help': 'Inject all aliases'
        },
        {
            'name': 'eject',
            'shorthand': 'ej',
            'help': 'Eject all aliases'
        },
    ]
}
aliases = Aliases(**META_DATA)