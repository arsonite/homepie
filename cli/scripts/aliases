#!/usr/bin/env python3.11

# Copyright (c) 2024-2025 Burak Günaydin
# All Rights Reserved
#
# This software is the confidential and proprietary information of
# Burak Günaydin. You may not use, modify, or distribute this
# software (unless you have the permission of the copyright holder)
# except in accordance with the terms of any applicable license agreement.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# System imports
import json
import os
import shutil
import sys
import traceback

# Add the parent directory of 'src' to the system path.
# This allows the script to import modules from the 'src' directory.
# Specifically, it inserts the absolute path of the 'src' directory
# at the beginning of the system path list (sys.path).
# This is useful when the script is executed from a different directory
# and needs to access modules located in 'src'.
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# From own imports
from src.BaseCLI import BaseCLI
        
class Aliases(BaseCLI):
    class _Alias:
        def __init__(self, name, help, command):
            self.name = name
            self.help = help
            self.command = command
            
    def meta(self):
        return {
            'name': 'aliases',
            'shorthand': 'al',
            'help': 'Manage, edit, inject, eject and list aliases for all custom shorthand commands',
            'commands': [
                {
                    'name': 'list',
                    'shorthand': 'ls',
                    'help': 'List all aliases'
                },
                {
                    'name': 'edit',
                    'shorthand': 'ed',
                    'help': 'Edit aliases'
                },
                {
                    'name': 'inject',
                    'shorthand': 'in',
                    'help': 'Inject all aliases'
                },
                {
                    'name': 'eject',
                    'shorthand': 'ej',
                    'help': 'Eject all aliases'
                },
                {
                    'name': 'reset',
                    'shorthand': 'rs',
                    'help': 'Resets the edited aliases file to the default aliases file'
                },
            ]
        }

    # TODO: Replace with package function
    def replace_placeholders(self, command, env_vars):
        """
        Replace placeholders in the alias command with corresponding environment variable values.
        The goal of sorting the environment variables is to ensure that longer keys (like HOMEPIE_SOURCE_PATH) are
        checked before shorter ones (like HOMEPIE). This prevents the partial match problem.
        For example, if $HOMEPIE were replaced first, it would change the $HOMEPIE_SOURCE_PATH
        placeholder into something that no longer matches the full key. Sorting by key length ensures that,
        when there are keys with common prefixes, the most specific one (longer one) is replaced first.

        Args:
            command (str): The alias command containing placeholders.
            env_vars (dict): A dictionary of environment variables where keys are variable names and values are their corresponding values.

        Returns:
            str: The command with placeholders replaced by actual environment variable values.
        """
        
        # Sort environment variables by the length of their keys in descending order
        sorted_env_vars = sorted(env_vars.items(), key=lambda item: len(item[0]), reverse=True)
        
        # Iterate over each environment variable
        for key, value in sorted_env_vars:
            # Create the placeholder format for the key
            replacement_key = f'${key}'
            
            # Replace only if the exact key exists in the command
            if replacement_key in command:
                command = command.replace(replacement_key, value)
        
        # Return the command with all placeholders replaced
        return command
            
    # TODO: Replace with package function
    def load_dotenv(self, dotenv_path):
        """
        Load environment variables from a .env file into the os.environ dictionary.

        Args:
            dotenv_path (str): The path to the .env file.
        """
        with open(dotenv_path) as f:
            for line in f:
                # Skip empty lines and comments
                if line.strip() and not line.startswith('#'):
                    # Split the line into key and value at the first '=' character
                    key, value = line.strip().split('=', 1)
                    # Set the environment variable
                    os.environ[key] = value
    
    def list_aliases(self, aliases):
        """
        List all aliases.
        """
        print()
        print('Available aliases:')
        for alias in aliases:
            print(f'    {alias.name}: {alias.help}')
        print()
        
    def edit_aliases(self, aliases):
        """
        Edit aliases.
        """
        
        # TODO: Move this to .env and make dynamically parsed from source path
        edited_alises_directory_path = '/usr/local/src/homepie/cli/dist'
        edited_aliases_file_path = f'{edited_alises_directory_path}/aliases-edited.json'
        
        # Check if the file exists, if not create it
        # Create parent directories if they do not exist
        os.makedirs(edited_alises_directory_path, exist_ok=True)
        
        # Save a prettified JSON of aliases to the file
        with open(edited_aliases_file_path, 'w') as file:
            json.dump([alias.__dict__ for alias in aliases], file, indent=4)
            
        # Open the edited file with vim for the user to edit
        self.shell(f'vim {edited_aliases_file_path}')
    
    def inject_aliases(self, aliases, skip_refresh:bool=False):
        """
        Inject all aliases.
        """
        print()
        print('Injecting all aliases...')

        # TODO: Move this to .env and make dynamically parsed
        env_path = '/usr/local/src/homepie/.env'
        # Load environment variables from .env file
        self.load_dotenv(env_path)

        # Replace placeholders in alias commands
        env_vars = { key: os.getenv(key) for key in os.environ }
        for alias in aliases:
            alias.command = self.replace_placeholders(alias.command, env_vars)
        
        bashrc_path = os.path.expanduser('~/.bashrc')
        start_marker = '# --- HOMEPIE ALIASES START ---'
        end_marker = '# --- HOMEPIE ALIASES END ---'

        # Format aliases into the proper structure
        formatted_aliases = [f'alias {alias.name}="{alias.command}"' for alias in aliases]

        # Read the current .bashrc content
        with open(bashrc_path, 'r') as file:
            bashrc_content = file.readlines()
            
        # Check if the aliases block already exists
        start_index = None
        end_index = None
        for i, line in enumerate(bashrc_content):
            if start_marker in line:
                start_index = i
            if end_marker in line:
                end_index = i
        # Remove existing aliases block if present
        if start_index is not None and end_index is not None:
            print('Aliases already exist. Ejecting existing aliases first...')
            self.eject_aliases(aliases, silent_mode=True, skip_refresh=True)

        # Read the current .bashrc content again
        with open(bashrc_path, 'r') as file:
            bashrc_content = file.readlines()

        # Insert the new aliases block
        new_aliases_block = [start_marker + '\n'] + [alias + '\n' for alias in formatted_aliases] + [end_marker + '\n']
        bashrc_content.extend(new_aliases_block)

        # Write the updated content back to .bashrc
        with open(bashrc_path, 'w') as file:
            file.writelines(bashrc_content)
        
        for alias in formatted_aliases:
            print(f'Injected alias: {alias}')
            
        print('Injected.')
        
        if skip_refresh:
            print('Hint: Run "exec bash" to apply the changes.')
            print()
        else:
            print()
            # Refresh the current shell to load the new .bashrc
            self.shell(f'. {bashrc_path}')
            self.shell('exec bash')
        
    # TODO: Print that no aliases exist to be ejected
    def eject_aliases(self, aliases, silent_mode:bool=False, skip_refresh:bool=False):
        """
        Eject all aliases.
        """
        if not silent_mode:
            print()
            print('Ejecting all aliases...')
        
        bashrc_path = os.path.expanduser('~/.bashrc')
        start_marker = '# --- HOMEPIE ALIASES START ---'
        end_marker = '# --- HOMEPIE ALIASES END ---'

        # Read the current .bashrc content
        if os.path.exists(bashrc_path):
            with open(bashrc_path, 'r') as file:
                bashrc_content = file.readlines()
        else:
            bashrc_content = []

        # Remove existing aliases block if present
        start_index = None
        end_index = None
        for i, line in enumerate(bashrc_content):
            if start_marker in line:
                start_index = i
            if end_marker in line:
                end_index = i

        if start_index is not None and end_index is not None:
            del bashrc_content[start_index:end_index + 1]

        # Write the updated content back to .bashrc
        with open(bashrc_path, 'w') as file:
            file.writelines(bashrc_content)
        
        if not silent_mode:
            for alias in aliases:
                print(f'Ejected alias: {alias.name}="{alias.command}"')
            
        print('Ejected.')
        
        if skip_refresh:
            if not silent_mode:
                print('Hint: Run "exec bash" to apply the changes.')
                print()
        else:
            print()
            # Refresh the current shell to load the new .bashrc
            self.shell(f'. {bashrc_path}')
            self.shell('exec bash')
            
    def reset_edited_aliases_file(self):
        """
        Reset the edited aliases file to the default aliases file.
        """
        print()
        print('Resetting the edited aliases file...')

        # TODO: Move this to .env and make dynamically parsed from source path
        default_file_path = '/usr/local/src/homepie/cli/files/aliases.json'
        edited_file_path = '/usr/local/src/homepie/cli/dist/aliases-edited.json'

        shutil.copyfile(default_file_path, edited_file_path)

        print('Reset complete.')
        print()
    
    def execute(self):
        command = self.get_command()
        
        if command == 'reset' or command == 'rs':
            self.reset_edited_aliases_file() # Circumvents initialization error if aliases file is broken
            sys.exit(0)
        
        # Check if the edited aliases file exists
        # TODO: Move this to .env and make dynamically parsed from source path
        default_file_path = '/usr/local/src/homepie/cli/files/aliases.json'
        edited_file_path = '/usr/local/src/homepie/cli/dist/aliases-edited.json'
        if os.path.exists(edited_file_path):
            file_path = edited_file_path
        else:
            file_path = default_file_path

        try:
            # Read aliases from the selected JSON file
            with open(file_path, 'r') as file:
                aliases_json = json.load(file)
            
            aliases = []
            for alias in aliases_json:
                alias_instance = self._Alias(**alias)
                aliases.append(alias_instance)
                    
            if (command == 'list' or command == 'ls'):
                self.list_aliases(aliases)
            elif command == 'edit' or command == 'ed':
                self.edit_aliases(aliases)
            elif command == 'inject' or command == 'in':
                self.inject_aliases(aliases)
            elif command == 'eject' or command == 'ej':
                self.eject_aliases(aliases)
        except json.JSONDecodeError:
            print()
            print(f'Failed to load aliases file at "{file_path}".')
            print('Please make sure the (probably faulty edited) aliases file is in the correct format.')
            print('You can also execute "aliases reset" to restore the proper aliases file.')
            print()
        except:
            traceback.print_exc()
        
if __name__ == '__main__':
    aliases = Aliases()