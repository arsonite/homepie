#!/usr/bin/env python3.11

# Copyright (C) 2024-2025 Burak GÃ¼naydin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# System imports
import inspect
import os
import shutil
import sys

# From package imports
from teatype.cli import BaseCLI, Command
from teatype.logging import err, log, hint, nl

# From-as system imports
from importlib import util as iutil

# From-as package imports
from teatype.io import TemporaryDirectory as TempDir

CURRENT_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
SCRIPTS_DIR = f'{CURRENT_DIRECTORY}/scripts'

# TODO: Replace with package constant
TAB='    '

# TODO: Write this as a package component
class MainCLI(BaseCLI):
    def meta(self):
        return {
            'name': 'homepie',
            'shorthand': 'hp',
            'help': 'Main CLI that manages and runs available commands from the "scripts" directory.'
        }
        
    # TODO: Decouple this class from CheckIfRunning into BaseCLI to prevent DRY
    def load_scripts(self):
        """
        Discover and import all Python scripts in the `scripts/` directory, skipping __init__.py and non-Python files.
        """
        scripts = {}

        # Create a temporary directory for renaming and importing
        with TempDir(directory_path=CURRENT_DIRECTORY) as temp_dir:
            try:
                # List all files in the scripts directory
                for filename in os.listdir(SCRIPTS_DIR):
                    # Skip non-Python files and __init__.py
                    if filename != '__init__.py' and filename != '__pycache__':
                        # Convert filename from kebab-case to snake_case for temporary renaming
                        formatted_module_name = filename.replace('-', '_').replace('.py', '')
                        formatted_filename = formatted_module_name + '.py'

                        # Full path to the original and the temporary file
                        original_filepath = os.path.join(SCRIPTS_DIR, filename)
                        temp_filepath = os.path.join(temp_dir, formatted_filename)

                        try:
                            try:
                                # Copy the file to the temp directory with the new snake_case name
                                shutil.copy2(original_filepath, temp_filepath)
                            except Exception as e:
                                print("An error occurred during file copy:", e)

                            # Load the module from the temp directory file directly without modifying sys.path
                            spec = iutil.spec_from_file_location(formatted_module_name, temp_filepath)
                            module = iutil.module_from_spec(spec)
                            spec.loader.exec_module(module)

                            # Convert kebab-case to CamelCase for the class name
                            camel_case_name = ''.join(word.capitalize() for word in formatted_module_name.split('_'))

                            # Get the class from the module
                            script_class = getattr(module, camel_case_name, None)

                            # Ensure the class is derived from BaseCLI
                            if script_class and inspect.isclass(script_class) and issubclass(script_class, BaseCLI):
                                # Instantiate the class
                                script_instance = script_class(auto_parse=False,
                                                               auto_validate=False,
                                                               auto_execute=False)
                                scripts[script_instance.name] = script_instance

                        except Exception as e:
                            # Handle exceptions (optional logging can be added here)
                            print(f'Error loading script "{filename}": {e}')

            finally:
                # Remove the temp directory from sys.path after import
                sys.path.pop(0)

        # Sort the scripts dictionary by keys
        scripts = dict(sorted(scripts.items()))
        return scripts
    
    def print(self):
        indented_formatted_string = '\n'
        
        # Add usage information to the formatted string
        indented_formatted_string += 'Usage:\n'
        indented_formatted_string += f'{TAB}hp <script> [args]'
        indented_formatted_string += '\n'
        indented_formatted_string += '\n'
        indented_formatted_string += f'Scripts:\n'
        
        # Iterate over each script and add its details to the formatted string
        for index, script_key in enumerate(self.scripts):
            script = self.scripts[script_key]
            script_str = script.format_str(include_args=False, include_meta=True, minify_usage=True, tab_padding=1)
            
            if index > 0:
                indented_formatted_string += '\n'
                
            indented_formatted_string += f'{script_str}'
            indented_formatted_string += '\n'
        
        print(indented_formatted_string)
        
        hint('Use "<script> -h, --help" flag for usage information.', pad_bottom=1)
    
    def execute(self):
        """
        Handles the execution of the selected command or lists all commands if no command is provided.
        
        This method first loads all available scripts from the `scripts/` directory and initializes them.
        It then creates a list of `Command` objects for each script.
        After parsing the command-line arguments, it either prints the available commands if no specific command is provided,
        or it executes the selected command.
        """
        
        # Load all available scripts from the `scripts/` directory
        self.scripts = self.load_scripts()
        
        # Initialize an empty list to store command objects
        self.commands = []
        
        # Iterate over each script and create a Command object for it
        for script_key in self.scripts:
            script = self.scripts[script_key]
            command = Command(name=script.name,
                              shorthand=script.shorthand,
                              help=script.help)
            self.commands.append(command)
            
        self.parse_args() # Parse the command-line arguments
        
        # If no command or flags are provided, print the available commands
        if len(self.parsed_arguments) == 0 and len(self.parsed_flags) == 0:
            self.print()
            return
        
        try:
            # Retrieve the script name from the parsed command
            script_name = self.parsed_command
            
            # Iterate over the scripts to find the one matching the shorthand command
            for script_key in self.scripts:
                script = self.scripts[script_key]
                if script.shorthand == self.parsed_command:
                    script_name = script.name
            
            # Retrieve the selected script based on the parsed command
            selected_script = self.scripts[script_name]
            # Parse the arguments for the selected script
            selected_script.parse_args()
            # Remove the script name from the arguments list
            del selected_script.parsed_arguments[0]
            # Validate the arguments for the selected script
            selected_script.validate_args()
            
            # Execute the selected script
            selected_script.execute()
        except SystemExit:
            # Handle the SystemExit exception to prevent the program from exiting
            pass
        except:
            # Validate arguments if an exception occurs
            self.validate_args()

if __name__ == '__main__':
    main_cli = MainCLI(auto_parse=False, auto_validate=False)