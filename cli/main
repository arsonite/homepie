#!/usr/bin/env python3.11

# Copyright (c) 2024-2024 Burak Günaydin
# All Rights Reserved
#
# This software is the confidential and proprietary information of
# Burak Günaydin. You may not use, modify, or distribute this
# software (unless you have the permission of the copyright holder)
# except in accordance with the terms of any applicable license agreement.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# System imports
import importlib
import os

# From own imports
from src.BaseCLI import BaseCLI

CURRENT_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
SCRIPTS_DIR = f'{CURRENT_DIRECTORY}/scripts'

CLI_META = {
    'name': 'homepie',
    'short': 'hp',
    'help': 'Main CLI that manages and runs available commands from the "scripts" directory.'
}

class MainCLI(BaseCLI):
    def __init__(self):
        super().__init__(**CLI_META)
        
    def load_scripts(self):
        """
        Discover and import all Python scripts in the `scripts/` directory, skipping __init__.py and non-Python files.
        """
        scripts = {}
        for filename in os.listdir(SCRIPTS_DIR):
            # TODO: Skip files that are not of class BaseCLI
            if filename != '__init__.py' and filename != '__pycache__':
                # TODO: Make this lazy and only if needed
                formatted_module_name = filename.replace('-', '_')
                formatted_filename = formatted_module_name + '.py' # Convert filename from kebab-case to snake_case for import
                os.rename(os.path.join(SCRIPTS_DIR, filename), os.path.join(SCRIPTS_DIR, formatted_filename))
                
                try:
                    module = importlib.import_module(f'scripts.{formatted_module_name}')
                finally:
                    # Revert the filename back to its original form
                    os.rename(os.path.join(SCRIPTS_DIR, formatted_filename), os.path.join(SCRIPTS_DIR, filename).replace('.py', ''))
                    
                # Convert kebab-case to CamelCase
                camel_case_name = ''.join(word.capitalize() for word in formatted_module_name.split('_'))
                script_class = getattr(module, f'{camel_case_name}')
                script_instance = script_class()
                scripts[script_instance.name] = script_instance
        return scripts

    def execute(self):
        print(self.arguments)
        print(self.flags)
        
        """
        Handles the execution of the selected command or lists all commands if no command is provided.
        """
        # if not args.command:
        #     # List all available commands if no command is given
        #     print()
        #     print('Usage:')
        #     print('    hp <command> [args]')
        #     print()
        #     print('Available commands:')
        #     scripts = self.load_scripts()
        #     for name, script in scripts.items():
        #         print(f'    {name}: {script.description}')
        #     print()
        # else:
        #     # Run the provided command
        #     scripts = self.discover_clis()
        #     if args.command in scripts:
        #         script = scripts[args.command]
        #         command_parser = argparse.ArgumentParser(description=script.description)
        #         script.add_arguments(command_parser)
        #         command_args = command_parser.parse_args(args.command_args)
        #         script.run(command_args)
        #     else:
        #         print(f'Command "{args.command}" not found.')

if __name__ == '__main__':
    # Initialize the main CLI and run it with parsed arguments
    main_cli = MainCLI()
    main_cli.load_scripts()
    main_cli.execute()