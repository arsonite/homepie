[
    // homepie aliases
    {
        "name": "hpd",
        "help": "Change directory to homepie data path",
        "command": "cd $HOMEPIE_DATA_PATH"
    },
    {
        "name": "hps",
        "help": "Change directory to homepie source path",
        "command": "cd $HOMEPIE_SOURCE_PATH"
    },
    {
        "name": "hpc",
        "help": "Change directory to homepie client path",
        "command": "cd $HOMEPIE_SOURCE_PATH/client"
    },
    {
        "name": "hpci",
        "help": "Change directory to homepie cli path",
        "command": "cd $HOMEPIE_SOURCE_PATH/cli"
    },
    {
        "name": "hpco",
        "help": "Change directory to homepie controller path",
        "command": "cd $HOMEPIE_SOURCE_PATH/controller"
    },
    {
        "name": "hpdb",
        "help": "Change directory to homepie database-config path",
        "command": "cd $HOMEPIE_SOURCE_PATH/database"
    },
    {
        "name": "hpi",
        "help": "Change directory to homepie ipc/redis-config path",
        "command": "cd $HOMEPIE_SOURCE_PATH/ipc"
    },
    {
        "name": "hpsv",
        "help": "Change directory to homepie server/backend path",
        "command": "cd $HOMEPIE_SOURCE_PATH/server"
    },
    {
        "name": "hpv",
        "help": "Activate the homepie virtual environment",
        "command": ". $HOMEPIE_VENV_PATH/bin/activate"
    },

    // git aliases
    {
        "name": "gb",
        "help": "Checkout a branch",
        "function": [
            "gb() {",
            "   local branch_name='$1'",
            "   if [ -z '$branch_name' ]; then",
            "       git branch -a",
            "   elif git rev-parse --verify '$branch_name' >/dev/null 2>&1; then",
            "       git checkout '$branch_name'",
            "   else",
            "       git checkout -B '$branch_name'",
            "   fi",
            "}"
        ]
    },
    {
        "name": "gd",
        "help": "Delete a branch",
        "function": [
            "gd() {",
            "   local branch_name='$1'",
            "   if [ -z '$branch_name' ]; then",
            "       echo 'Error: Branch name cannot be empty.'",
            "       exit 1",
            "   fi",
            "   git remote prune origin",
            "   git branch -d '$branch_name'",
            "}"
        ]
    },
    {
        "name": "gl",
        "help": "Pull changes from a remote repository",
        "command": "git pull"
    },
    {
        "name": "gp",
        "help": "Push changes to a remote repository",
        "function": [
            "gp() {",
            "   if [ -z '$1' ]; then",
            "       echo 'Error: Commit message cannot be empty.'",
            "       exit 1",
            "   fi",
            "   git add .",
            "   git commit -m '$*'",
            "   git push",
            "}"
        ]
    },
    {
        "name": "gs",
        "help": "Show the status of the repository",
        "command": "git status"
    },

    // python aliases
    {
        "name": "pe",
        "help": "Install a python package in editable mode",
        "command": "python3.11 -m pip install -e ."
    },
    {
        "name": "pi",
        "help": "Install a python package",
        "command": "python3.11 -m pip install"
    },
    {
        "name": "pl",
        "help": "View the installed python packages in a more detailed format",
        "command": "python3.11 -m pip list --format=columns"
    },
    {
        "name": "pr",
        "help": "Install all the python packages in the requirements.txt file",
        "command": "python3.11 -m pip install -r requirements.txt"
    },
    {
        "name": "pv",
        "help": "Activates the first python virtual environment found in the directory (recursively)",
        "function": [
            "pv() {",
            "   local dir='${1:-.}'",
            "   local venv_dir",
            "   venv_dir=$(find '$dir' -type d -name '*venv' | head -n 1)",
            "   if [ -n '$venv_dir' ]; then",
            "       . '$venv_dir/bin/activate' && echo 'Activated virtual environment: $venv_dir'",
            "   else",
            "       echo 'No 'venv' directory found.'",
            "       return 1",
            "   fi",
            "}"
        ]
    },
    {
        "name": "pvc <venv_name>",
        "help": "Create a python virtual environment with the given name",
        "function": [
            "pvc() {",
            "   if [ -z '$1' ]; then",
            "       echo 'Usage: pvc <env_name>'",
            "       return 1",
            "   fi",
            "   local env_name='$1'",
            "   if [ -d '$env_name' ]; then",
            "       echo 'Directory '$env_name' already exists.'",
            "       return 1",
            "   fi",
            "   python3.11 -m venv '$env_name-venv' && echo 'Virtual environment '$env_name-venv' created.'",
            "}"
        ]
    },
    {
        "name": "pvd",
        "help": "Deactivate the current virtual environment",
        "command": "deactivate"
    },
    {
        "name": "py",
        "help": "Run a python script",
        "command": "python3.11"
    },

    // helpful aliases
    {
        "name": "bashrc",
        "help": "Directly edit the bashrc file with 'vim'",
        "command": "vim ~/.bashrc"
    },
    {
        "name": "clean-all",
        "help": "Search and delete .zone.identifier files and __pycache__ directories",
        "function": [
            "clean-all() {",
            "   echo 'Searching and deleting .zone.identifier files and __pycache__ directories, ignoring .git, node_modules, and venv...'",
            "   find . \\( -path './.git' -o -path './node_modules' -o -path './venv' \\) -prune -o \\",
            "       -type d -name '__pycache__' -print -exec rm -rf {} +",
            "   find . \\( -path './.git' -o -path './node_modules' -o -path './venv' \\) -prune -o \\",
            "       -type f -name '*:Zone.Identifier' -print -exec rm -f {} +",
            "   echo 'Cleanup complete.'",
            "}"
        ]
    },
    {
        "name": "home",
        "help": "Change directory to home",
        "command": "cd ~"
    },
    {
        "name": "l",
        "help": "List all files and directories comprehensively",
        "command": "ls -la -h --color"
    },
    {
        "name": "root",
        "help": "Change directory to root",
        "command": "cd /"
    },
    {
        "name": "sbashrc",
        "help": "Source the bashrc",
        "command": ". ~/.bashrc"
    },

    // teatype aliases
    // TODO: Decouple
    {
        "name": "tt",
        "help": "Change directory to teatype source path",
        "command": "cd $TEATYPE_SOURCE_PATH"
    },
    {
        "name": "ttp",
        "help": "Change directory to teatype python source path",
        "command": "cd $TEATYPE_PYTHON_SOURCE_PATH"
    },
    {
        "name": "tts",
        "help": "Change directory to teatype typescript source path",
        "command": "cd $TEATYPE_TYPESCRIPT_SOURCE_PATH"
    }
]
